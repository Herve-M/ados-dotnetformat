trigger:
  branches:
    include:
      - main
      - refs/tags/*
  paths:
    include:
    - src/*

pr:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  publisherId: 'herve-matysiak'
  extensionId: 'dotnetformat'
  extensionName: 'dotnet-format'
  artifactName: 'VSIX'
  shareToOrganisation: 'hmatysiak'
  connectedServiceName: 'VS-MarketPlace'

stages:
  - stage: 'Build'
    jobs: 
      - job: 
        steps: 
        - task: NodeTool@0 
          displayName: 'Install NodeJs'
          inputs:
            versionSpec: '10.x'

        - task: TfxInstaller@3
          displayName: 'Install tfx-cli'
          inputs: 
            version: 'v0.8.x'
            checkLatest: true

        - task: Npm@1
          displayName: 'npm init'
          inputs:
            command: custom
            verbose: false
            customCommand: 'run init:ci'

        - task: Npm@1
          displayName: 'npm build'
          inputs:
            command: custom
            verbose: false
            customCommand: 'run build:ci'

        - task: PackageAzureDevOpsExtension@3
          displayName: 'Pack VSIX'
          inputs:
            rootFolder: '$(System.DefaultWorkingDirectory)'
            publisherId: '$(PublisherID)'
            extensionId: '$(ExtensionID)'
            extensionName: '$(ExtensionName)'
            updateTasksVersion: false
            extensionVisibility: 'private'
            extensionPricing: 'free'

        - task: CopyFiles@2
          displayName: 'Copy VSIX'
          inputs:
            Contents: '**/*.vsix'
            TargetFolder: '$(Build.ArtifactStagingDirectory)'

        - task: PublishPipelineArtifact@1
          displayName: 'Internal save VSIX'
          inputs:
            targetPath: '$(Build.ArtifactStagingDirectory)'
            artifactName: '$(ArtifactName)'

  - stage: 'Publish_DEV'
    dependsOn: 'Build'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs: 
      - job:
        steps: 
        - task: NodeTool@0 
          displayName: 'Install NodeJs'
          inputs:
            versionSpec: '10.x'

        - task: TfxInstaller@3
          displayName: 'Install tfx-cli'
          inputs: 
            version: 'v0.8.x'
            checkLatest: true

        - task: DownloadPipelineArtifact@2
          displayName: 'Get VSIX'
          inputs:
            artifact: '$(ArtifactName)'
            path: '$(Pipeline.Workspace)/$(ArtifactName)'

        - task: QueryAzureDevOpsExtensionVersion@3
          name: 'VersionFromMarket'
          displayName: 'Get current path version'
          inputs:
            connectTo: 'VsTeam'
            connectedServiceName: '$(connectedServiceName)'
            publisherId: '$(PublisherID)'
            extensionId: '$(ExtensionID)'
            extensionTag: '-dev'
            versionAction: 'Patch'
            extensionVersionOverride: '$(ForcedVersion)'

        - task: PublishAzureDevOpsExtension@3
          name: 'PublishToMarket'
          displayName: 'Publish to Market'
          inputs:
            connectTo: 'VsTeam'
            connectedServiceName: '$(connectedServiceName)'
            fileType: 'vsix'
            vsixFile: '$(Pipeline.Workspace)/$(ArtifactName)/*.vsix'
            publisherId: '$(PublisherID)'
            extensionId: '$(ExtensionID)'
            extensionName: '$(ExtensionName)-DEV'
            extensionTag: '-dev'
            extensionVersion: '$(VersionFromMarket.Extension.Version)'
            updateTasksVersion: true
            updateTasksVersionType: 'patch'
            extensionVisibility: 'privatepreview'
            shareWith: '$(shareToOrganisation)'
            noWaitValidation: true
            
        - task: IsAzureDevOpsExtensionValid@3
          displayName: 'Check market ext. validation'
          inputs:
            connectTo: 'VsTeam'
            connectedServiceName: '$(connectedServiceName)'
            method: 'vsix'
            vsixFile: '$(PublishToMarket.Extension.OutputPath)'

        - task: PublishPipelineArtifact@1
          displayName: 'Save VSIX'
          inputs:
            publishLocation: pipeline
            targetPath: '$(PublishToMarket.Extension.OutputPath)'
            artifact: '$(ArtifactName)-DEV'
          condition: succeededOrFailed()

  - stage: 'Publish_PROD'
    dependsOn: 'Build'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/tags/'))
    jobs: 
      - job:
        steps:
        - task: NodeTool@0 
          displayName: 'Install NodeJs'
          inputs:
            versionSpec: '10.x'

        - task: TfxInstaller@3
          displayName: 'Install tfx-cli'
          inputs: 
            version: 'v0.8.x'
            checkLatest: true

        - task: DownloadPipelineArtifact@2
          displayName: 'Get VSIX'
          inputs:
            artifact: '$(ArtifactName)'
            path: '$(Pipeline.Workspace)/$(ArtifactName)'

        - task: PublishAzureDevOpsExtension@3
          name: 'PublishToMarket'
          displayName: 'Publish to Market'  
          inputs:
            connectTo: 'VsTeam'
            connectedServiceName: '$(connectedServiceName)'
            fileType: 'vsix'
            vsixFile: '$(Pipeline.Workspace)/$(ArtifactName)/*.vsix'
            publisherId: '$(PublisherID)'
            extensionId: '$(ExtensionID)'
            updateTasksVersion: false
            extensionVisibility: 'private'
            shareWith: '$(shareToOrganisation)'
            noWaitValidation: true

        - task: IsAzureDevOpsExtensionValid@3
          displayName: 'Check market ext. validation'
          inputs:
            connectTo: 'VsTeam'
            connectedServiceName: '$(connectedServiceName)'
            method: 'vsix'
            vsixFile: '$(PublishToMarket.Extension.OutputPath)'
            
        - task: PublishPipelineArtifact@1
          displayName: 'Save VSIX'
          inputs:
            publishLocation: pipeline
            targetPath: '$(PublishToMarket.Extension.OutputPath)'
            artifact: '$(ArtifactName)-PROD'
          condition: succeededOrFailed()