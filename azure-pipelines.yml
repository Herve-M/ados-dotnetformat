trigger:
  branches:
    include:
      - main
      - refs/tags/*
  paths:
    include:
    - src/*

pr:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  publisherId: 'herve-matysiak'
  extensionId: 'dotnetformat'
  extensionName: 'dotnet-format'
  artifactName: 'VSIX'
  shareToOrganisation: 'hmatysiak'
  connectedServiceName: 'VS-MarketPlace'
  extensionVisibilityForProd: 'private'

stages:
  - stage: 'Build'
    jobs: 
      - job: 
        steps: 
          - task: NodeTool@0 
            inputs:
              versionSpec: '10.x'
          - task: TfxInstaller@3
            inputs: 
              version: 'v0.8.x'
              checkLatest: true
          - task: Npm@1
            inputs:
              command: 'install'
          - script: 'npx tsc'
          - task: QueryAzureDevOpsExtensionVersion@3
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: '$(connectedServiceName)'
              publisherId: '$(PublisherID)'
              extensionId: '$(ExtensionID)'
              versionAction: 'Patch'
              outputVariable: 'Task.Extension.Version'
          - task: PackageAzureDevOpsExtension@3
            inputs:
              rootFolder: '$(System.DefaultWorkingDirectory)'
              publisherId: '$(PublisherID)'
              extensionId: '$(ExtensionID)'
              extensionName: '$(ExtensionName)'
              extensionVersion: '$(Task.Extension.Version)'
              updateTasksVersion: false
              updateTasksVersionType: 'patch'
              extensionVisibility: 'private'
              extensionPricing: 'free'
          - task: CopyFiles@2
            displayName: "Copy Files to: $(Build.ArtifactStagingDirectory)"
            inputs:
              Contents: "**/*.vsix"
              TargetFolder: "$(Build.ArtifactStagingDirectory)"
          - task: PublishBuildArtifacts@1
            inputs:
              PathtoPublish: '$(Build.ArtifactStagingDirectory)'
              ArtifactName: '$(ArtifactName)'

  - stage: 'Publish-DEV'
    dependsOn: 'Build'
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/tags/'))
    jobs: 
      - job:
        steps: 
          - task: NodeTool@0 
            inputs:
              versionSpec: '10.x'

          - task: TfxInstaller@3
            inputs: 
              version: 'v0.8.x'
              checkLatest: true

          - task: DownloadPipelineArtifact@2
            inputs:
              artifact: '$(ArtifactName)'

          - task: PublishAzureDevOpsExtension@3
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: '$(connectedServiceName)'
              fileType: 'vsix'
              vsixFile: '$(Pipeline.Workspace)/$(ArtifactName)/*.vsix'
              publisherId: '$(PublisherID)'
              extensionId: '$(ExtensionID)'
              extensionTag: '-dev'
              updateTasksVersion: false
              extensionVisibility: 'privatepreview'
              shareWith: '$(shareToOrganisation)'
              noWaitValidation: true
              
          - task: IsAzureDevOpsExtensionValid@3
            inputs:
              connectTo: 'VsTeam'
              connectedServiceName: '$(connectedServiceName)'
              method: 'vsix'
              vsixFile: '$(publishDev.Extension.OutputPath)'

          - task: PublishPipelineArtifact@1
            displayName: 'Publish vsix'
            inputs:
              publishLocation: pipeline
              targetPath: '$(publishDev.Extension.OutputPath)'
              artifact: 'dev'
            condition: succeededOrFailed()

  - stage: 'Publish-PROD'
    dependsOn: 'Build'
    condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/main'))
    jobs: 
      - job:
        steps:
        - task: NodeTool@0 
          inputs:
            versionSpec: '10.x'

        - task: TfxInstaller@3
          inputs: 
            version: 'v0.8.x'
            checkLatest: true

        - task: DownloadPipelineArtifact@2
          inputs:
            artifact: '$(ArtifactName)'

        - task: PublishAzureDevOpsExtension@3
          inputs:
            connectTo: 'VsTeam'
            connectedServiceName: '$(connectedServiceName)'
            fileType: 'vsix'
            vsixFile: '$(Pipeline.Workspace)/$(ArtifactName)/*.vsix'
            publisherId: '$(PublisherID)'
            extensionId: '$(ExtensionID)'
            updateTasksVersion: false
            extensionVisibility: 'private'
            shareWith: '$(shareToOrganisation)'
            noWaitValidation: false
            
        - task: PublishPipelineArtifact@1
          displayName: 'Publish vsix'
          inputs:
            publishLocation: pipeline
            targetPath: '$(publishDev.Extension.OutputPath)'
            artifact: 'dev'
          condition: succeededOrFailed()